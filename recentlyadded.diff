--- skin/Confluence/scripts/RecentlyAdded.py	2010-05-05 01:12:29.206559207 +0000
+++ skin/Confluence/scripts/RecentlyAdded.py.new	2010-05-09 19:33:46.798363134 +0000
@@ -71,7 +71,7 @@
         self._fetch_totals()
         self._fetch_movie_info()
         self._fetch_tvshow_info()
-        # self._fetch_music_info()
+        self._fetch_music_info()
 
     def _fetch_totals( self ):
         # only run if user/skinner preference
@@ -82,7 +82,7 @@
         # only need to make Totals not empty
         self.WINDOW.setProperty( "Database.Totals", "true" )
         # sql statement for movie totals
-        sql_totals = "select count(1), count(playCount), * from movieview group by lastPlayed"
+        sql_totals = "select count(1), count(playCount), movieview.* from movieview group by lastPlayed"
         totals_xml = xbmc.executehttpapi( "QueryVideoDatabase(%s)" % quote_plus( sql_totals ), )
         records = re.findall( "<record>(.+?)</record>", totals_xml, re.DOTALL )
         # initialize our list
@@ -105,7 +105,7 @@
         totals_xml = xbmc.executehttpapi( "QueryVideoDatabase(%s)" % quote_plus( sql_totals ), )
         mvideos_totals = re.findall( "<field>(.+?)</field>", totals_xml, re.DOTALL )
         # sql statement for tv shows/episodes totals
-        sql_totals = "select count(1), sum(totalCount), sum(watched), sum(watchedCount) from tvshowview"
+        sql_totals = "select count(1), sum(totalCount), sum(watched), sum(watchedCount) from (select tvshow.*, path.strPath as strPath, counts.totalcount as totalCount, counts.watchedcount as watchedCount, counts.totalcount=counts.watchedcount as watched from tvshow join tvshowlinkpath on tvshow.idShow=tvshowlinkpath.idShow join path on path.idpath=tvshowlinkpath.idPath left outer join ( select tvshow.idShow as idShow,count(1) as totalcount, count(files.playCount) as watchedcount from tvshow join tvshowlinkepisode on tvshow.idShow = tvshowlinkepisode.idShow join episode on episode.idEpisode = tvshowlinkepisode.idEpisode join files on files.idFile = episode.idFile group by tvshow.idShow) counts on tvshow.idShow = counts.idShow) as tvshowview"
         totals_xml = xbmc.executehttpapi( "QueryVideoDatabase(%s)" % quote_plus( sql_totals ), )
         tvshows_totals = re.findall( "<field>(.+?)</field>", totals_xml, re.DOTALL )
         # if no tvshows we reset values
@@ -258,4 +258,3 @@
 
 if ( __name__ == "__main__" ):
     Main()
-
